# see http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties-security for details

app.name=OpenSyncManager

#
#Select spring profiles
#
# valid values for security profiles are: no_ssl, use_ssl
# valid values for auth profiles are: no_auth, form_based_auth, http_basic_auth, http_digest_auth, client_certificate_auth 
#
# this property can be overridden by application.properties in the following locations:
#    classpath root
#    current directory
#    classpath /config package
#    /config subdir of the current directory.
#	 System property -Dspring.profiles.active=production
#	 or specified on the command line using the switch --spring.profiles.active=dev,hsqldb
#
# This does not work: spring.profiles.active=${tip.wlan.core.server.security},${tip.wlan.core.server.auth},Extra_${app.name}
# Substitution of ${} in application.properties works in general, but not for spring.profiles.active and not for spring.profiles.include properties  
#
# *** Do not set spring.profiles.active property in this file, or be prepared for the World of Weird.
#spring.profiles.active=a_1,a_2,integration_test
#	Example: with application.properties:spring.profiles.active=a_1,a_2,dev,integration_test and @ActiveProfiles(profiles = "test1")
#		active profiles: [profile_it_1, profile_it_2, profile_dev_1, profile_dev_2, p_1, p_2, a_1, a_2, dev, integration_test, test1]
#   What happens: 
#		RealActiveProfiles.addAll(application.properties:spring.profiles.active)
#		RealActiveProfiles.addAll(application.properties:spring.profiles.include)
#		Find all other files named application-${profileName}.properties based on content of RealActiveProfiles
#		All application-${profileName}.properties:spring.profiles.include are read, and for each file:
#			RealActiveProfiles.addAll(application-${profileName}.properties:spring.profiles.include)
#			Recursively process other files named application-${profileName}.properties  based on content of RealActiveProfiles
#			
#		Note that application-${profileName}.properties:spring.profiles.active values are NOT added to the RealActiveProfiles in this case.
#	
#	Another Example: with application.properties:spring.profiles.active NOT SET and @ActiveProfiles(profiles = "integration_test")
#		active profiles: [profile_it_1, profile_it_2, active_it_1, active_it_2, p_1, p_2, integration_test]
#   What happens: 
#		application.properties:spring.profiles.active is read and not found
#		RealActiveProfiles.addAll(application.properties:spring.profiles.include)
#		Find all other files named application-${profileName}.properties based on content of RealActiveProfiles
#		Found application-integration_test.properties file
#			RealActiveProfiles.addAll(application-integration_test.properties:spring.profiles.active)
#			RealActiveProfiles.addAll(application-integration_test.properties:spring.profiles.include)
#		Find all other files named application-${profileName}.properties based on content of RealActiveProfiles
#			All application-${profileName}.properties:spring.profiles.include are read, and for each file:
#				RealActiveProfiles.addAll(application-${profileName}.properties:spring.profiles.include)
#				Recursively process other files named application-${profileName}.properties  based on content of RealActiveProfiles
#			
#		Note that only application-integration_test.properties:spring.profiles.active is read, 
#			all other application-${profileName}.properties:spring.profiles.active values 
#			are NOT added to the RealActiveProfiles in this case.
#
#	Summary: 
#		1. Only the first available property application*.properties:spring.profiles.active is read and added to RealActiveProfiles
#		2. All properties application*.properties:spring.profiles.include are read, and their values are added to RealActiveProfiles
#		3. Many application*.properties can be read during initialization (i.e. one can include a profile name that is referring to another)	
#		
# ***
#
# Use spring.profiles.active property for unit/integration tests to select proper application-*.properties file 
#	- this can be done by placing annotation @ActiveProfiles(profiles = "integration_test") on the test classes
#
# Use spring.profiles.active property for specific deployments - staging/cloud to select proper application-*.properties file 
#	- this can be done by using SystemProperty -Dspring.profiles.active=cloud
#
# Deployment-specific properties can be configured in other property files, like persistence-${envTarget:dev}.properties
# 	where value for property envTarget can be set using any mechanism, including placing it in the application-*.properties
# 
#
# Use spring.profiles.include property to specify static collection of profiles that are 
# 	always present in this configuration, regardless of spring.profiles.active property 
# Note: this property is additive, its value is always added to the list of active profiles
#spring.profiles.include=use_ssl,http_digest_auth,customer-credential-datastore-inmemory
#spring.profiles.include=no_ssl,no_auth
#spring.profiles.include=use_ssl,client_certificate_auth
spring.profiles.include=use_ssl_with_client_cert_and_basic_auth,client_certificate_and_basic_auth,RestTemplateConfiguration_X509_client_cert_auth,use_single_ds,opensync_cloud_config


#used by *-remote client classes when they authenticate their requests
tip.wlan.httpClientConfig=classpath:httpClientConfig.json
#this user/password is used together with http_digest_auth and http_basic_auth spring profiles
tip.wlan.serviceUser=user
# The value in here is bcrypt-encoded string "password", generated with the following command
#  htpasswd -nBC 10 "" | cut -d ':' -f2
tip.wlan.servicePassword=$2y$10$rXnaSR5q2PsFWs8WEfJAguKAPh0oHLFkAJFqd7Pf7PVa3cOIClGoS

spring.main.show-banner=false
server.port=9096

#this port is used by secondary server connector, it is protected by basic authentication, while primary server.port is protected by client certificate auth 
tip.wlan.secondaryPort=9097

tip.wlan.listOfPathsToProtect=/api,/filestore

#this server only supports REST requests, CSRF would get in the way
tip.wlan.csrf-enabled=false

#properties that configure remote interfaces to communicate with cloud
# when separate portal - prov - ssc processes are in use:
##SSC-related services 
#tip.wlan.cloudEventDispatcherBaseUrl=https://localhost:9031
#tip.wlan.statusServiceBaseUrl=https://localhost:9031
#tip.wlan.routingServiceBaseUrl=https://localhost:9031
#tip.wlan.alarmServiceBaseUrl=https://localhost:9031
##PROV-related services
#tip.wlan.customerServiceBaseUrl=https://localhost:9091
#tip.wlan.locationServiceBaseUrl=https://localhost:9091
#tip.wlan.equipmentServiceBaseUrl=https://localhost:9091
#tip.wlan.profileServiceBaseUrl=https://localhost:9091
#tip.wlan.firmwareServiceBaseUrl=https://localhost:9091
#tip.wlan.manufacturerServiceBaseUrl=https://localhost:9091

# For all-cloud-in-one-process : 
#SSC-related services 
tip.wlan.cloudEventDispatcherBaseUrl=https://localhost:9092
tip.wlan.statusServiceBaseUrl=https://localhost:9092
tip.wlan.routingServiceBaseUrl=https://localhost:9092
tip.wlan.alarmServiceBaseUrl=https://localhost:9092
#PROV-related services
tip.wlan.customerServiceBaseUrl=https://localhost:9092
tip.wlan.locationServiceBaseUrl=https://localhost:9092
tip.wlan.equipmentServiceBaseUrl=https://localhost:9092
tip.wlan.profileServiceBaseUrl=https://localhost:9092
tip.wlan.clientServiceBaseUrl=https://localhost:9092
tip.wlan.firmwareServiceBaseUrl=https://localhost:9092
tip.wlan.manufacturerServiceBaseUrl=https://localhost:9092

#server.session-timeout= # session timeout in seconds
#server.tomcat.max-threads = 0 # number of threads in protocol handler

#server.context-path= # the context path, defaults to '/'
#server.servlet-path= # the servlet path, defaults to '/'
#server.tomcat.access-log-pattern= # log pattern of the access log
#server.tomcat.access-log-enabled=false # is access logging enabled

# pretty print JSON
spring.jackson.serialization.INDENT_OUTPUT=TRUE
# sort keys
#http.mappers.json-sort-keys=false 

#spring.jmx.enabled=true # Expose MBeans from Spring




